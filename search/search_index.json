{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MRICloudPy Documentation MRICloudPy is a Python library designed to streamline the data processing, analysis, and visualization of subject-specific hierarchical volumetric MRICloud data. This free and open-source library provides a suite of tools to create and manage dataset objects. Navigate to the Getting Started page to learn how to install the library. The User Guide provides a tutorial on how to use this tool as well as descriptions of its available functions.","title":"Home"},{"location":"#mricloudpy-documentation","text":"MRICloudPy is a Python library designed to streamline the data processing, analysis, and visualization of subject-specific hierarchical volumetric MRICloud data. This free and open-source library provides a suite of tools to create and manage dataset objects. Navigate to the Getting Started page to learn how to install the library. The User Guide provides a tutorial on how to use this tool as well as descriptions of its available functions.","title":"MRICloudPy Documentation"},{"location":"about/","text":"","title":"About"},{"location":"getting_started/","text":"Getting Started with MRICloudPy Installation Use the package manager pip to install mricloudpy . pip install mricloudpy Alternatively, clone this repository and install the package locally. Running web app GUI To use the web app GUI, clone this repository and install panel and jupyter as well: pip install panel jupyter Then start the Bokeh server on your local machine: cd ./app panel serve app.py","title":"Getting Started"},{"location":"getting_started/#getting-started-with-mricloudpy","text":"","title":"Getting Started with MRICloudPy"},{"location":"getting_started/#installation","text":"Use the package manager pip to install mricloudpy . pip install mricloudpy Alternatively, clone this repository and install the package locally.","title":"Installation"},{"location":"getting_started/#running-web-app-gui","text":"To use the web app GUI, clone this repository and install panel and jupyter as well: pip install panel jupyter Then start the Bokeh server on your local machine: cd ./app panel serve app.py","title":"Running web app GUI"},{"location":"methods/","text":"Methods Reading and accessing data Data All methods except generate_3d_image are methods applied to the Data object. Data(path, id_type='numeric', id_list=None) Attributes: path : str Path to MRICloud data text file id_type : str, {'numeric', 'filename', 'custom'}, default = 'numeric' Type of subject ID formatting id_list : list, default = None List of custom subject IDs df : DataFrame DataFrame generated from path get_data Retrieve DataFrame of a given data object. get_data() Parameters: None Returns: DataFrame get_id Retrieve list of unique subject IDs. get_id() Parameters: None Returns: Series Manipulating data rename_subject Rename a specific subject ID. rename_subject(old, new) Parameters: old : str Old subject name to be replaced new : str New subject name Returns: DataFrame long_to_wide Convert default long form data to a wide format. long_to_wide() Parameters: None Returns: DataFrame Visualization generate_sunburst Generate a Plotly Express sunburst Figure model. generate_sunburst(type, id, base_level=5) Parameters: type : int, {1, 2} Type of hierarchical view id : str Subject ID base_level : int, {1, 2, 3, 4, 5}, default = 5 Lowest hierarchical level to include Returns: Figure generate_treemap Generate a Plotly Express treemap Figure model. generate_treemap(type, id, base_level=5) Parameters: type : int, {1, 2} Type of hierarchical view id : str Subject ID base_level : int, {1, 2, 3, 4, 5}, default = 5 Lowest hierarchical level to include Returns: Figure generate_icicle Generate a Plotly Express icicle Figure model. generate_icicle(type, id, base_level=5) Parameters: type : int, {1, 2} Type of hierarchical view id : str Subject ID base_level : int, {1, 2, 3, 4, 5}, default = 5 Lowest hierarchical level to include Returns: Figure generate_bar Generates a Plotly Express bar graph Figure. generate_bar(type, level, id, x='ID', y='Prop', log_y=False) Parameters: type : int, {1, 2} Type of hierarchical view level : int, {1, 2, 3, 4, 5} Hierarchical level of interest id : list, default = None Subjects of interest x : str, {'ID', 'Object'}, default = 'ID' Independent variable y : str, {'Prop', 'Volume'}, default = 'Prop' Dependent variable log_y : bool, default = False Logarithm of dependent variable Returns: Figure generate_mean_diff Generate a Plotly Express mean difference plot Figure. generate_mean_diff(type, level, color='ID', id=None) Parameters: type : int, {1, 2} Type of hierarchical view level : int , {1, 2, 3, 4, 5} Hierarchical level of interest color : str, {'ID', 'Object'}, default = 'ID' Variable to organize data by color id : list, default = None Subjects of interest Returns: Figure generate_corr_matrix Generate a Plotly Express heatmap Figure of a correlation matrix. generate_corr_matrix(type, level, id=None) Parameters: type : int, {1, 2} Type of hierarchical view level : int , {1, 2, 3, 4, 5} Hierarchical level of interest id : list, default = None Subjects of interest Returns: Figure Modeling and covariate analysis append_covariate_data Append covariate dataset to data object. append_covariate_data(path, icv=False, tbv=False) Parameters: path : str Path to covariate dataset file icv : bool, default = False Append intracranial volume to covariate dataset tbv : bool, default = False Append total brain volume to covariate dataset Returns: DataFrame normalize_covariate_data Normalize region data in covariate dataset by ICV, TBV, or ICV + TBV. normalize_covariate_data(covariate_dataset, normalizing_factor) Parameters: covariate_dataset : DataFrame Covariate dataset to be normalized normalizing_factor : str, {'icv, tbv, icv_tbv'} Variable to normalize region volumes by Returns: DataFrame OLS Run statsmodels Ordinary Least Squares regression on data object. OLS(covariate_dataset, covariates, outcome, log=False, residual_plot=False) Parameters: covariate_dataset : DataFrame Dataset containing the covariates and outcome covariates : list Covariates to include in analysis (x, independent covariates) outcome : str Outcome of interest (y, dependent covariate) log : bool, default = False Logaritm of covariates residual_plot : bool, default = False Return a residual plot of analysis results as Plotly Figure Returns: RegressionResultsWrapper.summary() , Figure Logit Run statsmodels Logit regression on data object. Logit(covariate_dataset, covariates, outcome, log=False, roc_plot=False) Parameters: covariate_dataset : DataFrame Dataset containing the covariates and outcome covariates : list Covariates to include in analysis (x, independent covariates) outcome : str Outcome of interest (y, dependent covariate) log : bool, default = False Logaritm of covariates roc_plot : bool, default = False Return a residual plot of analysis results as Plotly Figure Returns: RegressionResultsWrapper.summary() , Figure Imaging Generates a subplot or single image (if 'nrows' and 'ncols' is 1) of region-specific brain images on a template brain generate_3d_image generate_3d_image(img_path, regions, view, nrows, ncols, slice_n=0) Parameters: img_path : str regions : list view : int, {0 (horizontal), 1 (sagittal), 2 (coronal)} nrows : int, {1, 2, 3, 4, 5, 6, 7} ncols : int, {1, 2, 3, 4, 5, 6, 7} slice_n : int, default = 0","title":"Methods"},{"location":"methods/#methods","text":"","title":"Methods"},{"location":"methods/#reading-and-accessing-data","text":"","title":"Reading and accessing data"},{"location":"methods/#data","text":"All methods except generate_3d_image are methods applied to the Data object. Data(path, id_type='numeric', id_list=None) Attributes: path : str Path to MRICloud data text file id_type : str, {'numeric', 'filename', 'custom'}, default = 'numeric' Type of subject ID formatting id_list : list, default = None List of custom subject IDs df : DataFrame DataFrame generated from path","title":"Data"},{"location":"methods/#get_data","text":"Retrieve DataFrame of a given data object. get_data() Parameters: None Returns: DataFrame","title":"get_data"},{"location":"methods/#get_id","text":"Retrieve list of unique subject IDs. get_id() Parameters: None Returns: Series","title":"get_id"},{"location":"methods/#manipulating-data","text":"","title":"Manipulating data"},{"location":"methods/#rename_subject","text":"Rename a specific subject ID. rename_subject(old, new) Parameters: old : str Old subject name to be replaced new : str New subject name Returns: DataFrame","title":"rename_subject"},{"location":"methods/#long_to_wide","text":"Convert default long form data to a wide format. long_to_wide() Parameters: None Returns: DataFrame","title":"long_to_wide"},{"location":"methods/#visualization","text":"","title":"Visualization"},{"location":"methods/#generate_sunburst","text":"Generate a Plotly Express sunburst Figure model. generate_sunburst(type, id, base_level=5) Parameters: type : int, {1, 2} Type of hierarchical view id : str Subject ID base_level : int, {1, 2, 3, 4, 5}, default = 5 Lowest hierarchical level to include Returns: Figure","title":"generate_sunburst"},{"location":"methods/#generate_treemap","text":"Generate a Plotly Express treemap Figure model. generate_treemap(type, id, base_level=5) Parameters: type : int, {1, 2} Type of hierarchical view id : str Subject ID base_level : int, {1, 2, 3, 4, 5}, default = 5 Lowest hierarchical level to include Returns: Figure","title":"generate_treemap"},{"location":"methods/#generate_icicle","text":"Generate a Plotly Express icicle Figure model. generate_icicle(type, id, base_level=5) Parameters: type : int, {1, 2} Type of hierarchical view id : str Subject ID base_level : int, {1, 2, 3, 4, 5}, default = 5 Lowest hierarchical level to include Returns: Figure","title":"generate_icicle"},{"location":"methods/#generate_bar","text":"Generates a Plotly Express bar graph Figure. generate_bar(type, level, id, x='ID', y='Prop', log_y=False) Parameters: type : int, {1, 2} Type of hierarchical view level : int, {1, 2, 3, 4, 5} Hierarchical level of interest id : list, default = None Subjects of interest x : str, {'ID', 'Object'}, default = 'ID' Independent variable y : str, {'Prop', 'Volume'}, default = 'Prop' Dependent variable log_y : bool, default = False Logarithm of dependent variable Returns: Figure","title":"generate_bar"},{"location":"methods/#generate_mean_diff","text":"Generate a Plotly Express mean difference plot Figure. generate_mean_diff(type, level, color='ID', id=None) Parameters: type : int, {1, 2} Type of hierarchical view level : int , {1, 2, 3, 4, 5} Hierarchical level of interest color : str, {'ID', 'Object'}, default = 'ID' Variable to organize data by color id : list, default = None Subjects of interest Returns: Figure","title":"generate_mean_diff"},{"location":"methods/#generate_corr_matrix","text":"Generate a Plotly Express heatmap Figure of a correlation matrix. generate_corr_matrix(type, level, id=None) Parameters: type : int, {1, 2} Type of hierarchical view level : int , {1, 2, 3, 4, 5} Hierarchical level of interest id : list, default = None Subjects of interest Returns: Figure","title":"generate_corr_matrix"},{"location":"methods/#modeling-and-covariate-analysis","text":"","title":"Modeling and covariate analysis"},{"location":"methods/#append_covariate_data","text":"Append covariate dataset to data object. append_covariate_data(path, icv=False, tbv=False) Parameters: path : str Path to covariate dataset file icv : bool, default = False Append intracranial volume to covariate dataset tbv : bool, default = False Append total brain volume to covariate dataset Returns: DataFrame","title":"append_covariate_data"},{"location":"methods/#normalize_covariate_data","text":"Normalize region data in covariate dataset by ICV, TBV, or ICV + TBV. normalize_covariate_data(covariate_dataset, normalizing_factor) Parameters: covariate_dataset : DataFrame Covariate dataset to be normalized normalizing_factor : str, {'icv, tbv, icv_tbv'} Variable to normalize region volumes by Returns: DataFrame","title":"normalize_covariate_data"},{"location":"methods/#ols","text":"Run statsmodels Ordinary Least Squares regression on data object. OLS(covariate_dataset, covariates, outcome, log=False, residual_plot=False) Parameters: covariate_dataset : DataFrame Dataset containing the covariates and outcome covariates : list Covariates to include in analysis (x, independent covariates) outcome : str Outcome of interest (y, dependent covariate) log : bool, default = False Logaritm of covariates residual_plot : bool, default = False Return a residual plot of analysis results as Plotly Figure Returns: RegressionResultsWrapper.summary() , Figure","title":"OLS"},{"location":"methods/#logit","text":"Run statsmodels Logit regression on data object. Logit(covariate_dataset, covariates, outcome, log=False, roc_plot=False) Parameters: covariate_dataset : DataFrame Dataset containing the covariates and outcome covariates : list Covariates to include in analysis (x, independent covariates) outcome : str Outcome of interest (y, dependent covariate) log : bool, default = False Logaritm of covariates roc_plot : bool, default = False Return a residual plot of analysis results as Plotly Figure Returns: RegressionResultsWrapper.summary() , Figure","title":"Logit"},{"location":"methods/#imaging","text":"Generates a subplot or single image (if 'nrows' and 'ncols' is 1) of region-specific brain images on a template brain","title":"Imaging"},{"location":"methods/#generate_3d_image","text":"generate_3d_image(img_path, regions, view, nrows, ncols, slice_n=0) Parameters: img_path : str regions : list view : int, {0 (horizontal), 1 (sagittal), 2 (coronal)} nrows : int, {1, 2, 3, 4, 5, 6, 7} ncols : int, {1, 2, 3, 4, 5, 6, 7} slice_n : int, default = 0","title":"generate_3d_image"},{"location":"user_guide/","text":"User Guide An introductory guide to using MRICloudPy. View the basic example below or navigate to other guides. Basic example workflow Import package import mricloudpy as mp Creating dataset object from path to MRICloud data files DATA_PATH = 'mricloudpy/sample_data' SUBJECTS = ['Kermit', 'Miss Piggy', 'Fozzie', 'Gonzo', 'Rowlf', 'Scooter', 'Animal', 'Pepe', 'Rizzo', 'Beaker', 'Statler', 'Waldorf', 'Swedish Chef'] dataset = mp.Data(DATA_PATH, id_type='custom', id_list=SUBJECTS) print(dataset.get_data()) Uses Data , get_data Manipulating data dataset_wide = dataset.long_to_wide() print(dataset_wide) Uses long_to_wide Generating visualizations dataset.generate_sunburst(type=2, id='Beaker', base_level=5) dataset.generate_mean_diff(type=1, level=4) dataset.generate_corr_matrix(type=2, level=2) Uses generate_sunburst , generate_mean_diff , generate_corr_matrix Covariate analysis Appending covariate data DATA_PATH = 'sample_data_covariate' SUBJECTS = ['Kermit', 'Miss Piggy', 'Fozzie', 'Gonzo', 'Rowlf', 'Scooter', 'Animal', 'Pepe', 'Rizzo', 'Beaker', 'Statler', 'Waldorf', 'Swedish Chef'] COVARIATE_DATA_PATH = 'sample_data_covariate/covariate_data.csv' dataset = mp.Data(path=DATA_PATH, id_type='custom', id_list=SUBJECTS) covariate_dataset = dataset.append_covariate_data(COVARIATE_DATA_PATH, icv=True, tbv=True) Uses Data , append_covariate_data Normalizing covariate data covariate_dataset = dataset.normalize_covariate_data(covariate_dataset, normalizing_factor='icv') Uses normalize_covariate_data Running OLS regression print(dataset.OLS(covariate_dataset, covariates=['Age', 'Cerebellum_L_Type1.0_L3.0', 'Hippo_L_Type1.0_L4.0'], outcome='CSF_Type1.0_L1.0', log=False)) Uses OLS OLS Regression Results ============================================================================== Dep. Variable: CSF_Type1.0_L1.0 R-squared: 0.500 Model: OLS Adj. R-squared: 0.363 Method: Least Squares F-statistic: 3.663 Date: Wed, 29 Nov 2023 Prob (F-statistic): 0.0474 Time: 11:35:16 Log-Likelihood: -161.73 No. Observations: 15 AIC: 331.5 Df Residuals: 11 BIC: 334.3 Df Model: 3 Covariance Type: nonrobust ============================================================================================= coef std err t P>|t| [0.025 0.975] --------------------------------------------------------------------------------------------- const -8.335e+04 5.36e+04 -1.554 0.148 -2.01e+05 3.47e+04 Age 999.5951 1160.986 0.861 0.408 -1555.717 3554.907 Cerebellum_L_Type1.0_L3.0 1.1907 0.570 2.088 0.061 -0.064 2.446 Hippo_L_Type1.0_L4.0 9.1820 4.366 2.103 0.059 -0.427 18.791 ============================================================================== Omnibus: 3.365 Durbin-Watson: 2.303 Prob(Omnibus): 0.186 Jarque-Bera (JB): 1.139 Skew: -0.276 Prob(JB): 0.566 Kurtosis: 4.232 Cond. No. 1.08e+06 ============================================================================== Notes: [1] Standard Errors assume that the covariance matrix of the errors is correctly specified. [2] The condition number is large, 1.08e+06. This might indicate that there are strong multicollinearity or other numerical problems.","title":"User Guide"},{"location":"user_guide/#user-guide","text":"An introductory guide to using MRICloudPy. View the basic example below or navigate to other guides.","title":"User Guide"},{"location":"user_guide/#basic-example-workflow","text":"","title":"Basic example workflow"},{"location":"user_guide/#import-package","text":"import mricloudpy as mp","title":"Import package"},{"location":"user_guide/#creating-dataset-object-from-path-to-mricloud-data-files","text":"DATA_PATH = 'mricloudpy/sample_data' SUBJECTS = ['Kermit', 'Miss Piggy', 'Fozzie', 'Gonzo', 'Rowlf', 'Scooter', 'Animal', 'Pepe', 'Rizzo', 'Beaker', 'Statler', 'Waldorf', 'Swedish Chef'] dataset = mp.Data(DATA_PATH, id_type='custom', id_list=SUBJECTS) print(dataset.get_data()) Uses Data , get_data","title":"Creating dataset object from path to MRICloud data files"},{"location":"user_guide/#manipulating-data","text":"dataset_wide = dataset.long_to_wide() print(dataset_wide) Uses long_to_wide","title":"Manipulating data"},{"location":"user_guide/#generating-visualizations","text":"dataset.generate_sunburst(type=2, id='Beaker', base_level=5) dataset.generate_mean_diff(type=1, level=4) dataset.generate_corr_matrix(type=2, level=2) Uses generate_sunburst , generate_mean_diff , generate_corr_matrix","title":"Generating visualizations"},{"location":"user_guide/#covariate-analysis","text":"","title":"Covariate analysis"},{"location":"user_guide/#appending-covariate-data","text":"DATA_PATH = 'sample_data_covariate' SUBJECTS = ['Kermit', 'Miss Piggy', 'Fozzie', 'Gonzo', 'Rowlf', 'Scooter', 'Animal', 'Pepe', 'Rizzo', 'Beaker', 'Statler', 'Waldorf', 'Swedish Chef'] COVARIATE_DATA_PATH = 'sample_data_covariate/covariate_data.csv' dataset = mp.Data(path=DATA_PATH, id_type='custom', id_list=SUBJECTS) covariate_dataset = dataset.append_covariate_data(COVARIATE_DATA_PATH, icv=True, tbv=True) Uses Data , append_covariate_data","title":"Appending covariate data"},{"location":"user_guide/#normalizing-covariate-data","text":"covariate_dataset = dataset.normalize_covariate_data(covariate_dataset, normalizing_factor='icv') Uses normalize_covariate_data","title":"Normalizing covariate data"},{"location":"user_guide/#running-ols-regression","text":"print(dataset.OLS(covariate_dataset, covariates=['Age', 'Cerebellum_L_Type1.0_L3.0', 'Hippo_L_Type1.0_L4.0'], outcome='CSF_Type1.0_L1.0', log=False)) Uses OLS OLS Regression Results ============================================================================== Dep. Variable: CSF_Type1.0_L1.0 R-squared: 0.500 Model: OLS Adj. R-squared: 0.363 Method: Least Squares F-statistic: 3.663 Date: Wed, 29 Nov 2023 Prob (F-statistic): 0.0474 Time: 11:35:16 Log-Likelihood: -161.73 No. Observations: 15 AIC: 331.5 Df Residuals: 11 BIC: 334.3 Df Model: 3 Covariance Type: nonrobust ============================================================================================= coef std err t P>|t| [0.025 0.975] --------------------------------------------------------------------------------------------- const -8.335e+04 5.36e+04 -1.554 0.148 -2.01e+05 3.47e+04 Age 999.5951 1160.986 0.861 0.408 -1555.717 3554.907 Cerebellum_L_Type1.0_L3.0 1.1907 0.570 2.088 0.061 -0.064 2.446 Hippo_L_Type1.0_L4.0 9.1820 4.366 2.103 0.059 -0.427 18.791 ============================================================================== Omnibus: 3.365 Durbin-Watson: 2.303 Prob(Omnibus): 0.186 Jarque-Bera (JB): 1.139 Skew: -0.276 Prob(JB): 0.566 Kurtosis: 4.232 Cond. No. 1.08e+06 ============================================================================== Notes: [1] Standard Errors assume that the covariance matrix of the errors is correctly specified. [2] The condition number is large, 1.08e+06. This might indicate that there are strong multicollinearity or other numerical problems.","title":"Running OLS regression"}]}